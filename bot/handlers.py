import telebot
from telebot import types
from bot import keyboards
import datetime
import os
from dotenv import load_dotenv
from rapidfuzz import process

from pars_info import pars_kotr
from pars_info.search_active import search_active_from_pars
from models import speech_to_text, llm_news_analysis
from database.repository import Repository
from services.scheduler_service import escape_markdown, escape_markdown_v2, generate_answer
from services.report_service import ReportService
from models.llm_router import llm_router

load_dotenv()
telegram_token = os.getenv("TELEGRAM_TOKEN")

bot = telebot.TeleBot(telegram_token, skip_pending=True)

# # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤

user_dict = {}


class User:
    def __init__(self, userid):
        self.userid = userid

        self.userfirstname = None
        self.userlastname = None

        self.name_telebot = None
        self.date = None
        self.type_active = None
        self.name_active = None
        self.shortname_active = None
        self.count = 0
        self.day_buy = None
        self.price_buy_USD = 0
        self.price_buy_RUB = 0

        self.slov_to_del = None
        self.id_to_del = None

        self.select_active = None
        self.curr = None

        self.recognized_text = ""
        self.parsed_partial = None
        self.missing_fields = []
        self.analysis_slov = None

        self.llm_result = None

        self.mailing_period = None
        self.mailing_time = None
        self.mailing_day = None
        self.mailing_week = None


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start']
                     # , func=lambda message: message.chat.id in users
                     )
def send_start(message):
    chat_id = message.chat.id
    user = User(chat_id)
    user_dict[chat_id] = user
    user.userfirstname = message.chat.first_name
    user.userlastname = message.chat.last_name

    msg = bot.send_message(chat_id,
                           text="–ü—Ä–∏–≤–µ—Ç!‚úå\n\n"
                                "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!ü§ñ\n"
                                "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:"
                                "\nüÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å"
                                "\nüìà –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è"
                                "\nüí≠ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –ø–æ –ª—é–±–æ–º—É –∞–∫—Ç–∏–≤—É"
                                "\nüßê –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –º–æ–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                           reply_markup=keyboards.main_menu_markup(), parse_mode="Markdown")
    bot.register_next_step_handler(msg, start_bot)


@bot.message_handler(content_types=['–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'])
def send_welcome(message):
    chat_id = message.chat.id
    userid = message.chat.id
    user = User(userid)
    user_dict[chat_id] = user
    user.userfirstname = message.chat.first_name
    user.userlastname = message.chat.last_name

    msg = bot.send_message(chat_id,
                           text="–ü—Ä–∏–≤–µ—Ç!‚úå\n\n"
                                "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!ü§ñ\n"
                                "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:"
                                "\nüÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å"
                                "\nüìà –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è"
                                "\nüí≠ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –ø–æ –ª—é–±–æ–º—É –∞–∫—Ç–∏–≤—É"
                                "\nüßê –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –º–æ–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                           reply_markup=keyboards.main_menu_markup(), parse_mode="Markdown")
    bot.register_next_step_handler(msg, start_bot)


@bot.message_handler(content_types=['text', 'voice'])
def handle_clarification(message):
    chat_id = message.chat.id
    user = user_dict.get(chat_id)
    if user is None:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    if message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        ogg_bytes = bot.download_file(file_info.file_path)

        clarification_text = speech_to_text.generate_text_from_voice(ogg_bytes)
    elif message.content_type == 'text':
        clarification_text = message.text

    if clarification_text[0] == "‚ö†":
        bot.register_next_step_handler(message, clarification_text)
    else:
        combined_input = user.recognized_text + " " + clarification_text
        user.recognized_text = combined_input
        llm_result = llm_router(combined_input, chat_id)
        user.llm_result = llm_result
        if llm_result['used_tool'] == 'add_asset_tool':
            handle_add_asset(message)
        elif llm_result['used_tool'] == 'analyze_news_tool':
            handle_analyze_news(message)
        elif llm_result['used_tool'] == 'sql_query_tool' or llm_result['used_tool'] == 'rag_tool':
            handle_sql_query_or_rag(message)


def handle_add_asset(message):
    chat_id = message.chat.id
    user = user_dict.get(chat_id)
    llm_result = user.llm_result
    parsed, missing = generate_answer(llm_result['tool_data']['data'])
    recognized_text = user.recognized_text
    user.parsed_partial = parsed
    user.missing_fields = missing
    print("missing", missing)
    if missing:
        human_names = {
            "name_active": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞",
            "count": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            "price": "—Ü–µ–Ω—É",
            "currency": "–≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∫–∏",
            "day_buy": "–¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏"
        }
        missing_str = ", ".join(human_names[f] for f in missing)
        ask = (
            f"–Ø —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n¬´{recognized_text}¬ª\n\n"
            f"–û–¥–Ω–∞–∫–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {missing_str}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º), "
            "–∏ —è –ø–æ–ø—Ä–æ–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç—å."
        )
        bot.send_message(chat_id, ask)
        bot.register_next_step_handler(message, handle_clarification)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø–∞–ª–æ ‚Äì —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    user.type_active = parsed["type_active"]
    user.name_active = parsed["name_active"]
    user.shortname_active = parsed["shortname_active"]
    user.count = parsed["count"]
    user.price_buy_USD = parsed["price_buy_USD"]
    user.price_buy_RUB = parsed["price_buy_RUB"]
    user.day_buy = parsed["day_buy"]

    fmt_rub = f"{user.price_buy_RUB:,.2f}".replace(",", " ")
    fmt_usd = f"{user.price_buy_USD:,.2f}".replace(",", " ")
    confirm_text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω—è–ª –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤: *{user.name_active}* (—Ç–∏–∫–µ—Ä `{user.shortname_active}`)\n"
        f"‚Ä¢ –¢–∏–ø: `{user.type_active}`\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{user.count}`\n"
        f"‚Ä¢ –¶–µ–Ω–∞: `{fmt_rub}‚ÇΩ` / `{fmt_usd}$`\n"
        f"‚Ä¢ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: `{user.day_buy}`\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É?"
    )
    msg = bot.send_message(chat_id, text=confirm_text, reply_markup=keyboards.yes_or_no(),
                           parse_mode="Markdown")
    bot.register_next_step_handler(msg, confirm_insert)


def handle_analyze_news(message):
    chat_id = message.chat.id
    user = user_dict.get(chat_id)
    user.recognized_text = ""
    llm_result = user.llm_result

    result_text = llm_result['tool_data']['result_text']
    link = llm_result['tool_data']['link']
    try:
        msg = bot.send_message(chat_id, text=result_text, reply_markup=keyboards.url_news_button(link),
                               parse_mode="Markdown")
    except:
        msg = bot.send_message(chat_id, text=escape_markdown_v2(result_text), reply_markup=keyboards.url_news_button(link),
                               parse_mode="MarkdownV2")
    bot.register_next_step_handler(msg, start_bot)


def handle_sql_query_or_rag(message):
    chat_id = message.chat.id
    user = user_dict.get(chat_id)
    user.recognized_text = ""
    llm_result = user.llm_result

    result_text = llm_result['output']
    try:
        msg = bot.send_message(chat_id, text=result_text,
                               parse_mode="Markdown")
    except:
        msg = bot.send_message(chat_id, text=escape_markdown_v2(result_text),
                               parse_mode="MarkdownV2")
    bot.register_next_step_handler(msg, start_bot)



@bot.message_handler(content_types=['text'])
def start_bot(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.text == "/start":
        send_welcome(message)
    elif message.text == "üìë –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç":
        ReportService.send_report_to_user(int(chat_id), bot)
    elif message.text == "üì® –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        mailing_setup(message)
    elif message.text == "üîÉ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤—ã":
        change_active(message)
    elif message.text == "üí≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π":
        results, analysis_slov = llm_news_analysis.analyze_assets_with_news(int(chat_id), bot)
        user.analysis_slov = analysis_slov
        try:
            bot.send_message(chat_id,
                             text=results,
                             reply_markup=keyboards.get_all_news(), parse_mode="Markdown")
        except:
            bot.send_message(chat_id,
                             text=escape_markdown_v2(results),
                             reply_markup=keyboards.get_all_news(), parse_mode="MarkdownV2")

    else:
        handle_clarification(message)

def change_active(message):
    chat_id = message.chat.id

    msg = bot.send_message(chat_id,
                           text="–ö–∞–∫–æ–π –∏–∑ –∞–∫—Ç–∏–≤–æ–≤ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n "
                                "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å\–∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, —É–∫–∞–∑–∞–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏."
                                "\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø –∫—É–ø–∏–ª 5 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞ 2 –∏—é–Ω—è 2025 –≥–æ–¥–∞ –ø–æ —Ü–µ–Ω–µ 300 —Ä—É–±–ª–µ–π –∑–∞ —à—Ç—É–∫—É_",
                           reply_markup=keyboards.asset_type_menu_markup(), parse_mode="Markdown")
    bot.register_next_step_handler(msg, change_type_active)


def change_type_active(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if message.text == "ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
        user.type_active = "cripto"
        change_db(message)
    elif message.text == "üìë –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏":
        user.type_active = "stock_rus"
        change_db(message)
    elif message.text == "üìÑ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏":
        user.type_active = "stock_for"
        change_db(message)
    elif message.text == "üíµ –í–∞–ª—é—Ç–∞":
        user.type_active = "currency"
        change_db(message)
    elif message.text == "ü•á –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã":
        user.type_active = "metal"
        change_db(message)
    else:
        try:
            handle_clarification(message)
        except:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirm_insert(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    text = message.text

    if text == "‚úÖ –î–∞":
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
        Repository.insert_data_table(
            int(chat_id),
            user.userfirstname + "&" + user.userlastname,
            datetime.datetime.now().strftime('%Y-%m-%d'),
            user.type_active,
            user.name_active,
            user.shortname_active,
            user.count,
            datetime.datetime.strptime(user.day_buy, '%d.%m.%Y').strftime('%Y-%m-%d'),
            user.price_buy_USD,
            user.price_buy_RUB
        )
        bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=keyboards.back_to_start_markup())
        user.recognized_text = ""
        bot.register_next_step_handler(message, send_welcome)

    elif text == "‚ùå –ù–µ—Ç":
        msg = bot.send_message(chat_id,
                               "–û—Ç–º–µ–Ω–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                               reply_markup=keyboards.back_to_start_or_retry_markup())
        bot.register_next_step_handler(msg, after_cancel)

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´‚úÖ –î–∞¬ª –ª–∏–±–æ ¬´‚ùå –ù–µ—Ç¬ª.")
        bot.register_next_step_handler(message, confirm_insert)


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏ –≤—ã–±—Ä–∞–ª ‚Äúüìù –í–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞‚Äù
def after_cancel(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    elif message.text == "üìù –í–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞":
        change_active(message)
    else:
        bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        bot.register_next_step_handler(message, after_cancel)


def change_db(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    req_db = Repository.select_by_id_telebot(int(chat_id))
    result = req_db.loc[(req_db['type_active'] == user.type_active)]

    if len(result) > 0:
        msg = bot.send_message(chat_id,
                               text="–Ø –Ω–∞—à–µ–ª –∑–∞–ø–∏—Å–∏ –æ —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–µ?",
                               reply_markup=keyboards.add_new_or_delete(), parse_mode="Markdown")

        bot.register_next_step_handler(msg, change_cripto_db)

    else:
        msg = bot.send_message(chat_id,
                               text="–£ –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–æ–µ–º –∞–∫—Ç–∏–≤–µ üßê\n"
                                    "–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º?",
                               reply_markup=keyboards.add_new_or_to_start(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, change_cripto_db)


def change_cripto_db(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    elif message.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤":
        msg = bot.send_message(chat_id,
                               text=f"–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ –Ω–∞–π—Ç–∏ üîé\n\n"
                                    f"_–ù–∞–ø—Ä–∏–º–µ—Ä: bitcoin, SBER, USD_",
                               reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")

        bot.register_next_step_handler(msg, search_cripto)




    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è":
        req_db = Repository.select_by_id_telebot(int(chat_id))
        result = req_db.loc[(req_db['type_active'] == user.type_active)]

        id = result["id"].tolist()
        name_active = result["name_of_the_asset"].tolist()
        shortname_active = result["second_name_of_the_asset"].tolist()
        count = result["amount_of_asset"].tolist()
        day_buy = result["asset_purchase_date"].tolist()
        price_buy_USD = result["purchase_price_of_one_asset_in_dollars"].tolist()
        price_buy_RUB = result["purchase_price_of_one_asset_in_rubles"].tolist()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))

        slov_to_del = {}

        for i in range(len(result)):
            markup.add(types.KeyboardButton(f"{i + 1}. {name_active[i]} - {count[i]}"))
            slov_to_del[f"{i + 1}. {name_active[i]} - {count[i]}"] = str(id[i])
            bot.send_message(chat_id,
                             text=f"{i + 1}. {escape_markdown(name_active[i])}({escape_markdown(shortname_active[i])}) - {escape_markdown(str(count[i]))}\n"
                                  f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ - {escape_markdown(str(day_buy[i]))}\n"
                                  f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–≤ —Ä—É–±–ª—è—Ö) - {escape_markdown(str(price_buy_RUB[i]))}\n"
                                  f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö) - {escape_markdown(str(price_buy_USD[i]))}",
                             parse_mode="Markdown")

        msg = bot.send_message(chat_id,
                               text="–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å\—É–¥–∞–ª–∏—Ç—å?",
                               reply_markup=markup, parse_mode="Markdown")
        user.slov_to_del = slov_to_del

        bot.register_next_step_handler(msg, change_one_cripto_db)


def search_cripto(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        all_cactive_name, combined, select_active, slov = search_active_from_pars(user.type_active)
        if message.text in user.select_active.keys():
            if user.select_active[message.text][0] in all_cactive_name:
                user.name_active = user.select_active[message.text][1]
                user.shortname_active = user.select_active[message.text][0]
                msg = bot.send_message(chat_id,
                                       text=f"–û—Ç–ª–∏—á–Ω–æ, —è –Ω–∞—à–µ–ª *{message.text}*\n"
                                            f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å?",
                                       reply_markup=keyboards.add_active_or_to_start(), parse_mode="Markdown")
                bot.register_next_step_handler(msg, insert_count)
        elif message.text in all_cactive_name:
            user.name_active = message.text
            user.shortname_active = slov[message.text]
            msg = bot.send_message(chat_id,
                                   text=f"–û—Ç–ª–∏—á–Ω–æ, —è –Ω–∞—à–µ–ª *{message.text}*\n"
                                        f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å?",
                                   reply_markup=keyboards.add_active_or_to_start(), parse_mode="Markdown")
            bot.register_next_step_handler(msg, insert_count)
        else:
            results = process.extract(message.text, combined, limit=10, score_cutoff=50)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
            for match, score, _ in results:
                markup.add(types.KeyboardButton(match))

            msg = bot.send_message(chat_id,
                                   text=f"–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ *{message.text}* üòì\n"
                                        f"–ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ _(—Å–ø–∏—Å–æ–∫ –≤ –∫–Ω–æ–ø–∫–∞—Ö)_?\n\n"
                                        f"–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω–∞—á–µ",
                                   reply_markup=markup, parse_mode="Markdown")

            bot.register_next_step_handler(msg, search_cripto)


def insert_count(message):
    chat_id = message.chat.id
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    elif message.text == "üÜï –î–æ–±–∞–≤–ª—è–µ–º":
        msg = bot.send_message(chat_id,
                               text=f"–ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
                                    f"_–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.7873)_",
                               reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, insert_price_buy_USD)


def insert_price_buy_USD(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        if float(user.count) > 0 and message.text != "üíµÔ∏è–Ø –∑–Ω–∞—é —Å–∫–æ–ª—å–∫–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö":
            user.price_buy_RUB = float(message.text.replace(" ", ""))
            insert_day_buy(message)
        else:
            user.curr = "USD"
            msg = bot.send_message(chat_id,
                                   text=f"–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏–ª–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê üíµ\n"
                                        f"_–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.7873)_",
                                   reply_markup=keyboards.rub_price_or_to_start(), parse_mode="Markdown")
            bot.register_next_step_handler(msg, insert_price_buy_RUB)
            user.count = float(message.text.replace(" ", ""))


def insert_price_buy_RUB(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    elif message.text == "‚ÇΩÔ∏è–Ø –∑–Ω–∞—é —Å–∫–æ–ª—å–∫–æ –≤ —Ä—É–±–ª—è—Ö":
        user.curr = "RUB"
        msg = bot.send_message(chat_id,
                               text=f"–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏–ª–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–∞ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö ‚ÇΩ\n"
                                    f"_–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.7873)_",
                               reply_markup=keyboards.usd_price_or_to_start(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, insert_price_buy_USD)
    else:
        user.price_buy_USD = float(message.text.replace(" ", ""))
        insert_day_buy(message)


def insert_day_buy(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if user.curr == "USD":
        user.price_buy_USD = float(message.text.replace(" ", ""))
    elif user.curr == "RUB":
        user.price_buy_RUB = float(message.text.replace(" ", ""))

    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        msg = bot.send_message(chat_id,
                               text=f"–ù–∞–ø–∏—à–∏ –∫–æ–≥–¥–∞ –±—ã–ª–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n"
                                    f"_–§–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä {datetime.datetime.now().strftime('%d.%m.%Y')})_",
                               reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, insert_in_db)


def insert_in_db(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.day_buy = message.text.replace(" ", "")
    user_date = datetime.datetime.strptime(message.text.replace(" ", ""), "%d.%m.%Y")

    ruble_exchange = pars_kotr.get_cbr_history(currency_id="R01235",
                                               date_from=user_date.strftime("%d/%m/%Y"),
                                               date_to=user_date.strftime("%d/%m/%Y")
                                               )["rate"].to_list()[0]
    if user.price_buy_USD > 0:
        user.price_buy_RUB = float(user.price_buy_USD) * float(ruble_exchange)
    else:
        user.price_buy_USD = float(user.price_buy_RUB) / float(ruble_exchange)

    Repository.insert_data_table(int(chat_id), user.userfirstname + "&" + user.userlastname,
                                 datetime.datetime.now().strftime('%d.%m.%Y'), user.type_active, user.name_active,
                                 user.shortname_active, user.count, user.day_buy, user.price_buy_USD,
                                 user.price_buy_RUB)
    msg = bot.send_message(chat_id,
                           text=f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
                           reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")
    bot.register_next_step_handler(msg, send_welcome)


def change_one_cripto_db(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.id_to_del = user.slov_to_del[message.text]
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        msg = bot.send_message(chat_id,
                               text=f"–û–∫, —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ?",
                               reply_markup=keyboards.delete_options_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, change_one_cripto_db_2)


def change_one_cripto_db_2(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)

    elif message.text == "‚ùåÔ∏è–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å":
        Repository.delete_rows_by_condition(str(user.id_to_del))
        msg = bot.send_message(chat_id,
                               text=f"–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞",
                               reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, send_welcome)

    elif message.text == "‚Ü©Ô∏è–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
        msg = bot.send_message(chat_id,
                               text=f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
                                    f"_–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.7873)_",
                               reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, change_count_in_db)


def change_count_in_db(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        Repository.update_count_by_id((user.id_to_del), (message.text))
        msg = bot.send_message(chat_id,
                               text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ",
                               reply_markup=keyboards.back_to_start_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, send_welcome)


def mailing_setup(message):
    msg = bot.send_message(message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–∞",
                           reply_markup=keyboards.mailing_period_button(), parse_mode="Markdown")
    bot.register_next_step_handler(msg, mailing_day)


def mailing_day(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.mailing_period = message.text
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    elif message.text == "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
        msg = bot.send_message(chat_id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–∞",
                               reply_markup=keyboards.mailing_week_button(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, mailing_time)
    elif message.text == "üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ":
        msg = bot.send_message(chat_id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—á–µ—Ç–∞",
                               reply_markup=keyboards.mailing_day_button(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, mailing_time)
    elif message.text == "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ":
        mailing_time(message)
    else:
        mailing_setup(message)


def mailing_time(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        if user.mailing_period == "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
            user.mailing_week = message.text
        elif user.mailing_period == "üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ":
            user.day = message.text
        msg = bot.send_message(chat_id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                               reply_markup=keyboards.mailing_time_button(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, mailing_time_final)


def mailing_time_final(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    if message.text == "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        send_welcome(message)
    else:
        user.mailing_time = message.text
        Repository.update_mailing_settings(chat_id, user.mailing_period, user.mailing_day, user.mailing_week, user.mailing_time)
        msg = bot.send_message(chat_id,
                               text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
                               reply_markup=keyboards.mailing_time_button(), parse_mode="Markdown")
        bot.register_next_step_handler(msg, mailing_day)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.from_user.id
    user = user_dict[chat_id]
    if call.data == "get_all_news":
        analysis_slov = user.analysis_slov
        for an in analysis_slov.keys():
            analysis_new = analysis_slov[an]
            if len(analysis_new["name_active"]) > 1:
                name_active = ' '.join(analysis_new["name_active"])
                results = analysis_new["llm_result"]
            else:
                name_active = analysis_new["name_active"][0]
                results = analysis_new["llm_result"]
            link = analysis_new["link"][0]

            try:
                bot.send_message(chat_id,
                                 text=f"–î–ª—è {name_active}\n"
                                      f"{results}",
                                 reply_markup=keyboards.url_news_button(link), parse_mode="Markdown")
            except:
                bot.send_message(chat_id,
                                 text=escape_markdown_v2(f"–î–ª—è {name_active}\n"
                                                         f"{results}"),
                                 reply_markup=keyboards.url_news_button(link), parse_mode="MarkdownV2")