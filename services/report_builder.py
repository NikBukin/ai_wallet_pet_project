import pandas as pd
from pars_info.pars_kotr import (
    get_cbr_currency_price,
    get_crypto_price_coingecko,
    get_moex_stock_price,
    get_foreign_stock_price,
)
from services.formatters import fmt, color_circle

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ (—ç–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ)
SLOV_TYPE = {
    "cripto": ("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "ü™ô"),
    "stock_rus": ("–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏", "üìë"),
    "stock_for": ("–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏", "üìÑ"),
    "currency": ("–í–∞–ª—é—Ç–∞", "üíµ"),
    "metal": ("–ú–µ—Ç–∞–ª–ª", "ü•á"),
}


def det_text_to_report(df: pd.DataFrame) -> str:
    usd_rate = get_cbr_currency_price("USD")
    df = df.copy()
    df["total_buy_rub"] = df["amount_of_asset"] * df["purchase_price_of_one_asset_in_rubles"]
    df["total_buy_usd"] = df["amount_of_asset"] * df["purchase_price_of_one_asset_in_dollars"]

    df_grouped = (
        df
        .groupby(
            ["type_active", "name_of_the_asset", "second_name_of_the_asset"],
            as_index=False
        )
        .agg({
            "amount_of_asset": "sum",
            "total_buy_rub": "sum",
            "total_buy_usd": "sum",
        })
    )

    # 2) –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏
    rows = []
    for _, row in df_grouped.iterrows():
        ta = row["type_active"]
        symbol = row["second_name_of_the_asset"]
        name = row["name_of_the_asset"]
        cnt = row["amount_of_asset"]
        buy_rub = row["total_buy_rub"]
        buy_usd = row["total_buy_usd"]

        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
        p_usd = p_rub = 0.0
        i = 1
        while p_usd == 0 and p_rub == 0 and i < 10:
            if ta == "cripto":
                try:
                    p_usd = get_crypto_price_coingecko(symbol, "usd")
                    p_rub = p_usd * usd_rate
                except:
                    pass
            elif ta == "stock_rus":
                try:
                    p_rub = get_moex_stock_price(ticker=symbol, board="TQBR")
                except:
                    p_rub = get_moex_stock_price(ticker=name,   board="TQBR")
                p_usd = p_rub / usd_rate
            elif ta in ("stock_for", "metal"):
                try:
                    p_usd = get_foreign_stock_price(symbol)
                except:
                    p_usd = get_foreign_stock_price(name)
                p_rub = p_usd * usd_rate
            elif ta == "currency":
                p_usd = 1.0
                p_rub = usd_rate
            else:
                p_usd = p_rub = 0.0
            i += 1

        total_rub = cnt * p_rub
        total_usd = cnt * p_usd
        diff_rub = total_rub - buy_rub
        diff_usd = total_usd - buy_usd

        rows.append({
            **row.to_dict(),
            "current_total_rub": total_rub,
            "current_total_usd": total_usd,
            "diff_rub": diff_rub,
            "diff_usd": diff_usd,
        })

    report_df = pd.DataFrame(rows)

    # 3) –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É type_active
    summary = (
        report_df
        .groupby("type_active", as_index=False)
        .agg({
            "total_buy_rub":    "sum",
            "total_buy_usd":    "sum",
            "current_total_rub":"sum",
            "current_total_usd":"sum",
            "diff_rub":         "sum",
            "diff_usd":         "sum",
        })
    )

    # 4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    lines = []
    for ta in summary["type_active"]:
        title, emoji = SLOV_TYPE[ta]
        lines.append(f"{emoji} *{title.upper()}*")

        block = report_df[report_df["type_active"] == ta]
        for _, r in block.iterrows():
            lines += [
                f"\n"
                f" üîπ *{r['name_of_the_asset']}* ‚Äî {r['amount_of_asset']:.4f}:",
                f"üõí –ü–æ–∫—É–ø–∫–∞: {fmt(r['total_buy_rub'])}‚ÇΩ / {fmt(r['total_buy_usd'])}$",
                f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {fmt(r['current_total_rub'])}‚ÇΩ / {fmt(r['current_total_usd'])}$",
                f"{color_circle(r['diff_rub'], r['diff_usd'])} –†–∞–∑–Ω–∏—Ü–∞: {fmt(r['diff_rub'])}‚ÇΩ / {fmt(r['diff_usd'])}$",
            ]

        tot = summary[summary["type_active"] == ta].iloc[0]
        lines += [
            "",
            f"*–ò—Ç–æ–≥–æ –ø–æ {title.upper()}:*",
            f"üõí –ü–æ–∫—É–ø–∫–∞: {fmt(tot['total_buy_rub'])}‚ÇΩ / {fmt(tot['total_buy_usd'])}$",
            f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {fmt(tot['current_total_rub'])}‚ÇΩ / {fmt(tot['current_total_usd'])}$",
            f"{color_circle(tot['diff_rub'], tot['diff_usd'])} –†–∞–∑–Ω–∏—Ü–∞: {fmt(tot['diff_rub'])}‚ÇΩ / {fmt(tot['diff_usd'])}$",
            "\n",
        ]

    # 5) –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–∞–º
    all_tot = summary.agg({
        "total_buy_rub":     "sum",
        "total_buy_usd":     "sum",
        "current_total_rub": "sum",
        "current_total_usd": "sum",
        "diff_rub":          "sum",
        "diff_usd":          "sum",
    })

    lines += [
        "*–ò–¢–û–ì–û –ü–û –í–°–ï–ú –ê–ö–¢–ò–í–ê–ú*",
        f"üõí –ü–æ–∫—É–ø–∫–∞: {fmt(all_tot['total_buy_rub'])}‚ÇΩ / {fmt(all_tot['total_buy_usd'])}$",
        f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {fmt(all_tot['current_total_rub'])}‚ÇΩ / {fmt(all_tot['current_total_usd'])}$",
        f"{color_circle(all_tot['diff_rub'], all_tot['diff_usd'])} –†–∞–∑–Ω–∏—Ü–∞: {fmt(all_tot['diff_rub'])}‚ÇΩ / {fmt(all_tot['diff_usd'])}$",
    ]

    return "\n".join(lines)