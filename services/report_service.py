import time, threading, pytz, schedule
from datetime import datetime, timedelta
from database.repository import Repository
from services.report_builder import det_text_to_report


class ReportService:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤."""

    @staticmethod
    def send_report_to_user(chat_id: int, bot) -> None:
        assets = Repository.select_by_id_telebot(chat_id)
        if assets.empty:
            bot.send_message(chat_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.")
            return
        bot.send_message(chat_id,
                         det_text_to_report(assets),
                         parse_mode="Markdown")

    @staticmethod
    def send_report_to_all(bot) -> None:
        all_users = Repository.select_all()
        for uid in all_users["id_telebot"].unique():
            ReportService.send_report_to_user(uid, bot)


class MailingScheduler:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–∞—Å—Å—ã–ª–æ–∫.
    1 obj == 1 –æ–±—â–∏–π –ø–æ—Ç–æ–∫ schedule.run_pending()
    """

    MOSCOW_TZ = pytz.timezone("Europe/Moscow")

    def __init__(self, bot):
        self.bot = bot
        self.jobs: dict[int, schedule.Job] = {}
        self._start_runner()

    # ---------- —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ ----------
    def bootstrap_from_db(self):
        for row in Repository.get_mailing_settings_all().itertuples():
            self._create_job(row)

    def upsert_user(self, user_id: int):
        if job := self.jobs.pop(user_id, None):
            schedule.cancel_job(job)
        if (row := Repository.get_mailing_settings(user_id)) is not None:
            self._create_job(row)

    def _create_job(self, row):
        user_id = row.user_id
        m_period = row.m_period  # üîÑ / üìÜ / üìÖ
        m_day_choice = row.m_day  # —Å—Ç—Ä–æ–∫–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ ("üö© ‚Ä¶")
        m_day_week = row.m_day_in_week  # 0-6 –¥–ª—è weekly
        m_time = row.m_time[2:]  # ' 18:00' ‚Üí '18:00'
        send = lambda: ReportService.send_report_to_user(user_id, self.bot)

        if m_period == "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ":
            job = schedule.every().day.at(m_time).do(send)

        elif m_period == "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
            # m_day_week —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π 0-6 (–ø–Ω-–≤—Å)
            week_day = self._dow_str(m_day_week)
            job = getattr(schedule.every(), week_day).at(m_time).do(send)

        elif m_period == "üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ":
            # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫—Ä–æ–Ω + —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏
            def monthly_wrapper():
                today = datetime.now(self.MOSCOW_TZ).date()

                if m_day_choice == "üö© –í –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞" and today.day == 1:
                    send()

                elif m_day_choice == "‚Üî –í —Å–µ—Ä–µ–¥–∏–Ω–µ –º–µ—Å—è—Ü–∞" and today.day == 15:
                    send()

                elif m_day_choice == "üèÅ –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞":
                    tomorrow = today + timedelta(days=1)
                    if tomorrow.day == 1:  # —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
                        send()

            job = schedule.every().day.at(m_time).do(monthly_wrapper)

        else:
            return

        self.jobs[user_id] = job

    # ---------- —Ñ–æ–Ω–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä ----------
    def _start_runner(self):
        threading.Thread(
            target=self._loop, daemon=True, name="mailing-scheduler"
        ).start()

    @staticmethod
    def _loop():
        while True:
            schedule.run_pending()
            time.sleep(1)

    @staticmethod
    def _dow_str(num: int) -> str:
        return ["1‚É£ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "2‚É£ –í—Ç–æ—Ä–Ω–∏–∫", "‚É£ –°—Ä–µ–¥–∞", "4‚É£ –ß–µ—Ç–≤–µ—Ä–≥", "‚É£ –ü—è—Ç–Ω–∏—Ü–∞", "6‚É£ –°—É–±–±–æ—Ç–∞", "‚É£ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][int(num)]


# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ----------
def init_scheduler(bot):
    scheduler = MailingScheduler(bot)
    scheduler.bootstrap_from_db()
    return scheduler